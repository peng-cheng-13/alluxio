/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package alluxio.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-01-04")
public class SetAttributeTOptions implements org.apache.thrift.TBase<SetAttributeTOptions, SetAttributeTOptions._Fields>, java.io.Serializable, Cloneable, Comparable<SetAttributeTOptions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetAttributeTOptions");

  private static final org.apache.thrift.protocol.TField PINNED_FIELD_DESC = new org.apache.thrift.protocol.TField("pinned", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField TTL_FIELD_DESC = new org.apache.thrift.protocol.TField("ttl", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField PERSISTED_FIELD_DESC = new org.apache.thrift.protocol.TField("persisted", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.I16, (short)6);
  private static final org.apache.thrift.protocol.TField RECURSIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("recursive", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField TTL_ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ttlAction", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField M_INDEX_INFO__BLOCK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mIndexInfo_BlockId", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField M_INDEX_INFO__MAX_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("mIndexInfo_MaxValue", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField M_INDEX_INFO__MIN_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("mIndexInfo_MinValue", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField M_INDEX_INFO__VAR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("mIndexInfo_VarName", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField M_AUG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("mAugIndex", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField M_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("mPath", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField M_UKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("mUKey", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField M_UVALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("mUValue", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField M_DELETE_ATTRIBUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("mDeleteAttribute", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField DATASET_FIELD_DESC = new org.apache.thrift.protocol.TField("dataset", org.apache.thrift.protocol.TType.LIST, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SetAttributeTOptionsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SetAttributeTOptionsTupleSchemeFactory());
  }

  public boolean pinned; // optional
  public long ttl; // optional
  public boolean persisted; // optional
  public String owner; // optional
  public String group; // optional
  public short mode; // optional
  public boolean recursive; // optional
  /**
   * 
   * @see alluxio.thrift.TTtlAction
   */
  public alluxio.thrift.TTtlAction ttlAction; // optional
  public List<Long> mIndexInfo_BlockId; // optional
  public List<Double> mIndexInfo_MaxValue; // optional
  public List<Double> mIndexInfo_MinValue; // optional
  public List<String> mIndexInfo_VarName; // optional
  public List<Long> mAugIndex; // optional
  public List<String> mPath; // optional
  public List<String> mUKey; // optional
  public List<String> mUValue; // optional
  public boolean mDeleteAttribute; // optional
  public List<alluxio.thrift.H5DatasetInfo> dataset; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PINNED((short)1, "pinned"),
    TTL((short)2, "ttl"),
    PERSISTED((short)3, "persisted"),
    OWNER((short)4, "owner"),
    GROUP((short)5, "group"),
    MODE((short)6, "mode"),
    RECURSIVE((short)7, "recursive"),
    /**
     * 
     * @see alluxio.thrift.TTtlAction
     */
    TTL_ACTION((short)8, "ttlAction"),
    M_INDEX_INFO__BLOCK_ID((short)9, "mIndexInfo_BlockId"),
    M_INDEX_INFO__MAX_VALUE((short)10, "mIndexInfo_MaxValue"),
    M_INDEX_INFO__MIN_VALUE((short)11, "mIndexInfo_MinValue"),
    M_INDEX_INFO__VAR_NAME((short)12, "mIndexInfo_VarName"),
    M_AUG_INDEX((short)13, "mAugIndex"),
    M_PATH((short)14, "mPath"),
    M_UKEY((short)15, "mUKey"),
    M_UVALUE((short)16, "mUValue"),
    M_DELETE_ATTRIBUTE((short)17, "mDeleteAttribute"),
    DATASET((short)18, "dataset");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PINNED
          return PINNED;
        case 2: // TTL
          return TTL;
        case 3: // PERSISTED
          return PERSISTED;
        case 4: // OWNER
          return OWNER;
        case 5: // GROUP
          return GROUP;
        case 6: // MODE
          return MODE;
        case 7: // RECURSIVE
          return RECURSIVE;
        case 8: // TTL_ACTION
          return TTL_ACTION;
        case 9: // M_INDEX_INFO__BLOCK_ID
          return M_INDEX_INFO__BLOCK_ID;
        case 10: // M_INDEX_INFO__MAX_VALUE
          return M_INDEX_INFO__MAX_VALUE;
        case 11: // M_INDEX_INFO__MIN_VALUE
          return M_INDEX_INFO__MIN_VALUE;
        case 12: // M_INDEX_INFO__VAR_NAME
          return M_INDEX_INFO__VAR_NAME;
        case 13: // M_AUG_INDEX
          return M_AUG_INDEX;
        case 14: // M_PATH
          return M_PATH;
        case 15: // M_UKEY
          return M_UKEY;
        case 16: // M_UVALUE
          return M_UVALUE;
        case 17: // M_DELETE_ATTRIBUTE
          return M_DELETE_ATTRIBUTE;
        case 18: // DATASET
          return DATASET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PINNED_ISSET_ID = 0;
  private static final int __TTL_ISSET_ID = 1;
  private static final int __PERSISTED_ISSET_ID = 2;
  private static final int __MODE_ISSET_ID = 3;
  private static final int __RECURSIVE_ISSET_ID = 4;
  private static final int __MDELETEATTRIBUTE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PINNED,_Fields.TTL,_Fields.PERSISTED,_Fields.OWNER,_Fields.GROUP,_Fields.MODE,_Fields.RECURSIVE,_Fields.TTL_ACTION,_Fields.M_INDEX_INFO__BLOCK_ID,_Fields.M_INDEX_INFO__MAX_VALUE,_Fields.M_INDEX_INFO__MIN_VALUE,_Fields.M_INDEX_INFO__VAR_NAME,_Fields.M_AUG_INDEX,_Fields.M_PATH,_Fields.M_UKEY,_Fields.M_UVALUE,_Fields.M_DELETE_ATTRIBUTE,_Fields.DATASET};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PINNED, new org.apache.thrift.meta_data.FieldMetaData("pinned", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TTL, new org.apache.thrift.meta_data.FieldMetaData("ttl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PERSISTED, new org.apache.thrift.meta_data.FieldMetaData("persisted", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.RECURSIVE, new org.apache.thrift.meta_data.FieldMetaData("recursive", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TTL_ACTION, new org.apache.thrift.meta_data.FieldMetaData("ttlAction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, alluxio.thrift.TTtlAction.class)));
    tmpMap.put(_Fields.M_INDEX_INFO__BLOCK_ID, new org.apache.thrift.meta_data.FieldMetaData("mIndexInfo_BlockId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.M_INDEX_INFO__MAX_VALUE, new org.apache.thrift.meta_data.FieldMetaData("mIndexInfo_MaxValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.M_INDEX_INFO__MIN_VALUE, new org.apache.thrift.meta_data.FieldMetaData("mIndexInfo_MinValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.M_INDEX_INFO__VAR_NAME, new org.apache.thrift.meta_data.FieldMetaData("mIndexInfo_VarName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.M_AUG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("mAugIndex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.M_PATH, new org.apache.thrift.meta_data.FieldMetaData("mPath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.M_UKEY, new org.apache.thrift.meta_data.FieldMetaData("mUKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.M_UVALUE, new org.apache.thrift.meta_data.FieldMetaData("mUValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.M_DELETE_ATTRIBUTE, new org.apache.thrift.meta_data.FieldMetaData("mDeleteAttribute", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DATASET, new org.apache.thrift.meta_data.FieldMetaData("dataset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, alluxio.thrift.H5DatasetInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetAttributeTOptions.class, metaDataMap);
  }

  public SetAttributeTOptions() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SetAttributeTOptions(SetAttributeTOptions other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pinned = other.pinned;
    this.ttl = other.ttl;
    this.persisted = other.persisted;
    if (other.isSetOwner()) {
      this.owner = other.owner;
    }
    if (other.isSetGroup()) {
      this.group = other.group;
    }
    this.mode = other.mode;
    this.recursive = other.recursive;
    if (other.isSetTtlAction()) {
      this.ttlAction = other.ttlAction;
    }
    if (other.isSetMIndexInfo_BlockId()) {
      List<Long> __this__mIndexInfo_BlockId = new ArrayList<Long>(other.mIndexInfo_BlockId);
      this.mIndexInfo_BlockId = __this__mIndexInfo_BlockId;
    }
    if (other.isSetMIndexInfo_MaxValue()) {
      List<Double> __this__mIndexInfo_MaxValue = new ArrayList<Double>(other.mIndexInfo_MaxValue);
      this.mIndexInfo_MaxValue = __this__mIndexInfo_MaxValue;
    }
    if (other.isSetMIndexInfo_MinValue()) {
      List<Double> __this__mIndexInfo_MinValue = new ArrayList<Double>(other.mIndexInfo_MinValue);
      this.mIndexInfo_MinValue = __this__mIndexInfo_MinValue;
    }
    if (other.isSetMIndexInfo_VarName()) {
      List<String> __this__mIndexInfo_VarName = new ArrayList<String>(other.mIndexInfo_VarName);
      this.mIndexInfo_VarName = __this__mIndexInfo_VarName;
    }
    if (other.isSetMAugIndex()) {
      List<Long> __this__mAugIndex = new ArrayList<Long>(other.mAugIndex);
      this.mAugIndex = __this__mAugIndex;
    }
    if (other.isSetMPath()) {
      List<String> __this__mPath = new ArrayList<String>(other.mPath);
      this.mPath = __this__mPath;
    }
    if (other.isSetMUKey()) {
      List<String> __this__mUKey = new ArrayList<String>(other.mUKey);
      this.mUKey = __this__mUKey;
    }
    if (other.isSetMUValue()) {
      List<String> __this__mUValue = new ArrayList<String>(other.mUValue);
      this.mUValue = __this__mUValue;
    }
    this.mDeleteAttribute = other.mDeleteAttribute;
    if (other.isSetDataset()) {
      List<alluxio.thrift.H5DatasetInfo> __this__dataset = new ArrayList<alluxio.thrift.H5DatasetInfo>(other.dataset.size());
      for (alluxio.thrift.H5DatasetInfo other_element : other.dataset) {
        __this__dataset.add(new alluxio.thrift.H5DatasetInfo(other_element));
      }
      this.dataset = __this__dataset;
    }
  }

  public SetAttributeTOptions deepCopy() {
    return new SetAttributeTOptions(this);
  }

  @Override
  public void clear() {
    setPinnedIsSet(false);
    this.pinned = false;
    setTtlIsSet(false);
    this.ttl = 0;
    setPersistedIsSet(false);
    this.persisted = false;
    this.owner = null;
    this.group = null;
    setModeIsSet(false);
    this.mode = 0;
    setRecursiveIsSet(false);
    this.recursive = false;
    this.ttlAction = null;
    this.mIndexInfo_BlockId = null;
    this.mIndexInfo_MaxValue = null;
    this.mIndexInfo_MinValue = null;
    this.mIndexInfo_VarName = null;
    this.mAugIndex = null;
    this.mPath = null;
    this.mUKey = null;
    this.mUValue = null;
    setMDeleteAttributeIsSet(false);
    this.mDeleteAttribute = false;
    this.dataset = null;
  }

  public boolean isPinned() {
    return this.pinned;
  }

  public SetAttributeTOptions setPinned(boolean pinned) {
    this.pinned = pinned;
    setPinnedIsSet(true);
    return this;
  }

  public void unsetPinned() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PINNED_ISSET_ID);
  }

  /** Returns true if field pinned is set (has been assigned a value) and false otherwise */
  public boolean isSetPinned() {
    return EncodingUtils.testBit(__isset_bitfield, __PINNED_ISSET_ID);
  }

  public void setPinnedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PINNED_ISSET_ID, value);
  }

  public long getTtl() {
    return this.ttl;
  }

  public SetAttributeTOptions setTtl(long ttl) {
    this.ttl = ttl;
    setTtlIsSet(true);
    return this;
  }

  public void unsetTtl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TTL_ISSET_ID);
  }

  /** Returns true if field ttl is set (has been assigned a value) and false otherwise */
  public boolean isSetTtl() {
    return EncodingUtils.testBit(__isset_bitfield, __TTL_ISSET_ID);
  }

  public void setTtlIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TTL_ISSET_ID, value);
  }

  public boolean isPersisted() {
    return this.persisted;
  }

  public SetAttributeTOptions setPersisted(boolean persisted) {
    this.persisted = persisted;
    setPersistedIsSet(true);
    return this;
  }

  public void unsetPersisted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERSISTED_ISSET_ID);
  }

  /** Returns true if field persisted is set (has been assigned a value) and false otherwise */
  public boolean isSetPersisted() {
    return EncodingUtils.testBit(__isset_bitfield, __PERSISTED_ISSET_ID);
  }

  public void setPersistedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERSISTED_ISSET_ID, value);
  }

  public String getOwner() {
    return this.owner;
  }

  public SetAttributeTOptions setOwner(String owner) {
    this.owner = owner;
    return this;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public String getGroup() {
    return this.group;
  }

  public SetAttributeTOptions setGroup(String group) {
    this.group = group;
    return this;
  }

  public void unsetGroup() {
    this.group = null;
  }

  /** Returns true if field group is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup() {
    return this.group != null;
  }

  public void setGroupIsSet(boolean value) {
    if (!value) {
      this.group = null;
    }
  }

  public short getMode() {
    return this.mode;
  }

  public SetAttributeTOptions setMode(short mode) {
    this.mode = mode;
    setModeIsSet(true);
    return this;
  }

  public void unsetMode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  /** Returns true if field mode is set (has been assigned a value) and false otherwise */
  public boolean isSetMode() {
    return EncodingUtils.testBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  public void setModeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODE_ISSET_ID, value);
  }

  public boolean isRecursive() {
    return this.recursive;
  }

  public SetAttributeTOptions setRecursive(boolean recursive) {
    this.recursive = recursive;
    setRecursiveIsSet(true);
    return this;
  }

  public void unsetRecursive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECURSIVE_ISSET_ID);
  }

  /** Returns true if field recursive is set (has been assigned a value) and false otherwise */
  public boolean isSetRecursive() {
    return EncodingUtils.testBit(__isset_bitfield, __RECURSIVE_ISSET_ID);
  }

  public void setRecursiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECURSIVE_ISSET_ID, value);
  }

  /**
   * 
   * @see alluxio.thrift.TTtlAction
   */
  public alluxio.thrift.TTtlAction getTtlAction() {
    return this.ttlAction;
  }

  /**
   * 
   * @see alluxio.thrift.TTtlAction
   */
  public SetAttributeTOptions setTtlAction(alluxio.thrift.TTtlAction ttlAction) {
    this.ttlAction = ttlAction;
    return this;
  }

  public void unsetTtlAction() {
    this.ttlAction = null;
  }

  /** Returns true if field ttlAction is set (has been assigned a value) and false otherwise */
  public boolean isSetTtlAction() {
    return this.ttlAction != null;
  }

  public void setTtlActionIsSet(boolean value) {
    if (!value) {
      this.ttlAction = null;
    }
  }

  public int getMIndexInfo_BlockIdSize() {
    return (this.mIndexInfo_BlockId == null) ? 0 : this.mIndexInfo_BlockId.size();
  }

  public java.util.Iterator<Long> getMIndexInfo_BlockIdIterator() {
    return (this.mIndexInfo_BlockId == null) ? null : this.mIndexInfo_BlockId.iterator();
  }

  public void addToMIndexInfo_BlockId(long elem) {
    if (this.mIndexInfo_BlockId == null) {
      this.mIndexInfo_BlockId = new ArrayList<Long>();
    }
    this.mIndexInfo_BlockId.add(elem);
  }

  public List<Long> getMIndexInfo_BlockId() {
    return this.mIndexInfo_BlockId;
  }

  public SetAttributeTOptions setMIndexInfo_BlockId(List<Long> mIndexInfo_BlockId) {
    this.mIndexInfo_BlockId = mIndexInfo_BlockId;
    return this;
  }

  public void unsetMIndexInfo_BlockId() {
    this.mIndexInfo_BlockId = null;
  }

  /** Returns true if field mIndexInfo_BlockId is set (has been assigned a value) and false otherwise */
  public boolean isSetMIndexInfo_BlockId() {
    return this.mIndexInfo_BlockId != null;
  }

  public void setMIndexInfo_BlockIdIsSet(boolean value) {
    if (!value) {
      this.mIndexInfo_BlockId = null;
    }
  }

  public int getMIndexInfo_MaxValueSize() {
    return (this.mIndexInfo_MaxValue == null) ? 0 : this.mIndexInfo_MaxValue.size();
  }

  public java.util.Iterator<Double> getMIndexInfo_MaxValueIterator() {
    return (this.mIndexInfo_MaxValue == null) ? null : this.mIndexInfo_MaxValue.iterator();
  }

  public void addToMIndexInfo_MaxValue(double elem) {
    if (this.mIndexInfo_MaxValue == null) {
      this.mIndexInfo_MaxValue = new ArrayList<Double>();
    }
    this.mIndexInfo_MaxValue.add(elem);
  }

  public List<Double> getMIndexInfo_MaxValue() {
    return this.mIndexInfo_MaxValue;
  }

  public SetAttributeTOptions setMIndexInfo_MaxValue(List<Double> mIndexInfo_MaxValue) {
    this.mIndexInfo_MaxValue = mIndexInfo_MaxValue;
    return this;
  }

  public void unsetMIndexInfo_MaxValue() {
    this.mIndexInfo_MaxValue = null;
  }

  /** Returns true if field mIndexInfo_MaxValue is set (has been assigned a value) and false otherwise */
  public boolean isSetMIndexInfo_MaxValue() {
    return this.mIndexInfo_MaxValue != null;
  }

  public void setMIndexInfo_MaxValueIsSet(boolean value) {
    if (!value) {
      this.mIndexInfo_MaxValue = null;
    }
  }

  public int getMIndexInfo_MinValueSize() {
    return (this.mIndexInfo_MinValue == null) ? 0 : this.mIndexInfo_MinValue.size();
  }

  public java.util.Iterator<Double> getMIndexInfo_MinValueIterator() {
    return (this.mIndexInfo_MinValue == null) ? null : this.mIndexInfo_MinValue.iterator();
  }

  public void addToMIndexInfo_MinValue(double elem) {
    if (this.mIndexInfo_MinValue == null) {
      this.mIndexInfo_MinValue = new ArrayList<Double>();
    }
    this.mIndexInfo_MinValue.add(elem);
  }

  public List<Double> getMIndexInfo_MinValue() {
    return this.mIndexInfo_MinValue;
  }

  public SetAttributeTOptions setMIndexInfo_MinValue(List<Double> mIndexInfo_MinValue) {
    this.mIndexInfo_MinValue = mIndexInfo_MinValue;
    return this;
  }

  public void unsetMIndexInfo_MinValue() {
    this.mIndexInfo_MinValue = null;
  }

  /** Returns true if field mIndexInfo_MinValue is set (has been assigned a value) and false otherwise */
  public boolean isSetMIndexInfo_MinValue() {
    return this.mIndexInfo_MinValue != null;
  }

  public void setMIndexInfo_MinValueIsSet(boolean value) {
    if (!value) {
      this.mIndexInfo_MinValue = null;
    }
  }

  public int getMIndexInfo_VarNameSize() {
    return (this.mIndexInfo_VarName == null) ? 0 : this.mIndexInfo_VarName.size();
  }

  public java.util.Iterator<String> getMIndexInfo_VarNameIterator() {
    return (this.mIndexInfo_VarName == null) ? null : this.mIndexInfo_VarName.iterator();
  }

  public void addToMIndexInfo_VarName(String elem) {
    if (this.mIndexInfo_VarName == null) {
      this.mIndexInfo_VarName = new ArrayList<String>();
    }
    this.mIndexInfo_VarName.add(elem);
  }

  public List<String> getMIndexInfo_VarName() {
    return this.mIndexInfo_VarName;
  }

  public SetAttributeTOptions setMIndexInfo_VarName(List<String> mIndexInfo_VarName) {
    this.mIndexInfo_VarName = mIndexInfo_VarName;
    return this;
  }

  public void unsetMIndexInfo_VarName() {
    this.mIndexInfo_VarName = null;
  }

  /** Returns true if field mIndexInfo_VarName is set (has been assigned a value) and false otherwise */
  public boolean isSetMIndexInfo_VarName() {
    return this.mIndexInfo_VarName != null;
  }

  public void setMIndexInfo_VarNameIsSet(boolean value) {
    if (!value) {
      this.mIndexInfo_VarName = null;
    }
  }

  public int getMAugIndexSize() {
    return (this.mAugIndex == null) ? 0 : this.mAugIndex.size();
  }

  public java.util.Iterator<Long> getMAugIndexIterator() {
    return (this.mAugIndex == null) ? null : this.mAugIndex.iterator();
  }

  public void addToMAugIndex(long elem) {
    if (this.mAugIndex == null) {
      this.mAugIndex = new ArrayList<Long>();
    }
    this.mAugIndex.add(elem);
  }

  public List<Long> getMAugIndex() {
    return this.mAugIndex;
  }

  public SetAttributeTOptions setMAugIndex(List<Long> mAugIndex) {
    this.mAugIndex = mAugIndex;
    return this;
  }

  public void unsetMAugIndex() {
    this.mAugIndex = null;
  }

  /** Returns true if field mAugIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetMAugIndex() {
    return this.mAugIndex != null;
  }

  public void setMAugIndexIsSet(boolean value) {
    if (!value) {
      this.mAugIndex = null;
    }
  }

  public int getMPathSize() {
    return (this.mPath == null) ? 0 : this.mPath.size();
  }

  public java.util.Iterator<String> getMPathIterator() {
    return (this.mPath == null) ? null : this.mPath.iterator();
  }

  public void addToMPath(String elem) {
    if (this.mPath == null) {
      this.mPath = new ArrayList<String>();
    }
    this.mPath.add(elem);
  }

  public List<String> getMPath() {
    return this.mPath;
  }

  public SetAttributeTOptions setMPath(List<String> mPath) {
    this.mPath = mPath;
    return this;
  }

  public void unsetMPath() {
    this.mPath = null;
  }

  /** Returns true if field mPath is set (has been assigned a value) and false otherwise */
  public boolean isSetMPath() {
    return this.mPath != null;
  }

  public void setMPathIsSet(boolean value) {
    if (!value) {
      this.mPath = null;
    }
  }

  public int getMUKeySize() {
    return (this.mUKey == null) ? 0 : this.mUKey.size();
  }

  public java.util.Iterator<String> getMUKeyIterator() {
    return (this.mUKey == null) ? null : this.mUKey.iterator();
  }

  public void addToMUKey(String elem) {
    if (this.mUKey == null) {
      this.mUKey = new ArrayList<String>();
    }
    this.mUKey.add(elem);
  }

  public List<String> getMUKey() {
    return this.mUKey;
  }

  public SetAttributeTOptions setMUKey(List<String> mUKey) {
    this.mUKey = mUKey;
    return this;
  }

  public void unsetMUKey() {
    this.mUKey = null;
  }

  /** Returns true if field mUKey is set (has been assigned a value) and false otherwise */
  public boolean isSetMUKey() {
    return this.mUKey != null;
  }

  public void setMUKeyIsSet(boolean value) {
    if (!value) {
      this.mUKey = null;
    }
  }

  public int getMUValueSize() {
    return (this.mUValue == null) ? 0 : this.mUValue.size();
  }

  public java.util.Iterator<String> getMUValueIterator() {
    return (this.mUValue == null) ? null : this.mUValue.iterator();
  }

  public void addToMUValue(String elem) {
    if (this.mUValue == null) {
      this.mUValue = new ArrayList<String>();
    }
    this.mUValue.add(elem);
  }

  public List<String> getMUValue() {
    return this.mUValue;
  }

  public SetAttributeTOptions setMUValue(List<String> mUValue) {
    this.mUValue = mUValue;
    return this;
  }

  public void unsetMUValue() {
    this.mUValue = null;
  }

  /** Returns true if field mUValue is set (has been assigned a value) and false otherwise */
  public boolean isSetMUValue() {
    return this.mUValue != null;
  }

  public void setMUValueIsSet(boolean value) {
    if (!value) {
      this.mUValue = null;
    }
  }

  public boolean isMDeleteAttribute() {
    return this.mDeleteAttribute;
  }

  public SetAttributeTOptions setMDeleteAttribute(boolean mDeleteAttribute) {
    this.mDeleteAttribute = mDeleteAttribute;
    setMDeleteAttributeIsSet(true);
    return this;
  }

  public void unsetMDeleteAttribute() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MDELETEATTRIBUTE_ISSET_ID);
  }

  /** Returns true if field mDeleteAttribute is set (has been assigned a value) and false otherwise */
  public boolean isSetMDeleteAttribute() {
    return EncodingUtils.testBit(__isset_bitfield, __MDELETEATTRIBUTE_ISSET_ID);
  }

  public void setMDeleteAttributeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MDELETEATTRIBUTE_ISSET_ID, value);
  }

  public int getDatasetSize() {
    return (this.dataset == null) ? 0 : this.dataset.size();
  }

  public java.util.Iterator<alluxio.thrift.H5DatasetInfo> getDatasetIterator() {
    return (this.dataset == null) ? null : this.dataset.iterator();
  }

  public void addToDataset(alluxio.thrift.H5DatasetInfo elem) {
    if (this.dataset == null) {
      this.dataset = new ArrayList<alluxio.thrift.H5DatasetInfo>();
    }
    this.dataset.add(elem);
  }

  public List<alluxio.thrift.H5DatasetInfo> getDataset() {
    return this.dataset;
  }

  public SetAttributeTOptions setDataset(List<alluxio.thrift.H5DatasetInfo> dataset) {
    this.dataset = dataset;
    return this;
  }

  public void unsetDataset() {
    this.dataset = null;
  }

  /** Returns true if field dataset is set (has been assigned a value) and false otherwise */
  public boolean isSetDataset() {
    return this.dataset != null;
  }

  public void setDatasetIsSet(boolean value) {
    if (!value) {
      this.dataset = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PINNED:
      if (value == null) {
        unsetPinned();
      } else {
        setPinned((Boolean)value);
      }
      break;

    case TTL:
      if (value == null) {
        unsetTtl();
      } else {
        setTtl((Long)value);
      }
      break;

    case PERSISTED:
      if (value == null) {
        unsetPersisted();
      } else {
        setPersisted((Boolean)value);
      }
      break;

    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((String)value);
      }
      break;

    case GROUP:
      if (value == null) {
        unsetGroup();
      } else {
        setGroup((String)value);
      }
      break;

    case MODE:
      if (value == null) {
        unsetMode();
      } else {
        setMode((Short)value);
      }
      break;

    case RECURSIVE:
      if (value == null) {
        unsetRecursive();
      } else {
        setRecursive((Boolean)value);
      }
      break;

    case TTL_ACTION:
      if (value == null) {
        unsetTtlAction();
      } else {
        setTtlAction((alluxio.thrift.TTtlAction)value);
      }
      break;

    case M_INDEX_INFO__BLOCK_ID:
      if (value == null) {
        unsetMIndexInfo_BlockId();
      } else {
        setMIndexInfo_BlockId((List<Long>)value);
      }
      break;

    case M_INDEX_INFO__MAX_VALUE:
      if (value == null) {
        unsetMIndexInfo_MaxValue();
      } else {
        setMIndexInfo_MaxValue((List<Double>)value);
      }
      break;

    case M_INDEX_INFO__MIN_VALUE:
      if (value == null) {
        unsetMIndexInfo_MinValue();
      } else {
        setMIndexInfo_MinValue((List<Double>)value);
      }
      break;

    case M_INDEX_INFO__VAR_NAME:
      if (value == null) {
        unsetMIndexInfo_VarName();
      } else {
        setMIndexInfo_VarName((List<String>)value);
      }
      break;

    case M_AUG_INDEX:
      if (value == null) {
        unsetMAugIndex();
      } else {
        setMAugIndex((List<Long>)value);
      }
      break;

    case M_PATH:
      if (value == null) {
        unsetMPath();
      } else {
        setMPath((List<String>)value);
      }
      break;

    case M_UKEY:
      if (value == null) {
        unsetMUKey();
      } else {
        setMUKey((List<String>)value);
      }
      break;

    case M_UVALUE:
      if (value == null) {
        unsetMUValue();
      } else {
        setMUValue((List<String>)value);
      }
      break;

    case M_DELETE_ATTRIBUTE:
      if (value == null) {
        unsetMDeleteAttribute();
      } else {
        setMDeleteAttribute((Boolean)value);
      }
      break;

    case DATASET:
      if (value == null) {
        unsetDataset();
      } else {
        setDataset((List<alluxio.thrift.H5DatasetInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PINNED:
      return isPinned();

    case TTL:
      return getTtl();

    case PERSISTED:
      return isPersisted();

    case OWNER:
      return getOwner();

    case GROUP:
      return getGroup();

    case MODE:
      return getMode();

    case RECURSIVE:
      return isRecursive();

    case TTL_ACTION:
      return getTtlAction();

    case M_INDEX_INFO__BLOCK_ID:
      return getMIndexInfo_BlockId();

    case M_INDEX_INFO__MAX_VALUE:
      return getMIndexInfo_MaxValue();

    case M_INDEX_INFO__MIN_VALUE:
      return getMIndexInfo_MinValue();

    case M_INDEX_INFO__VAR_NAME:
      return getMIndexInfo_VarName();

    case M_AUG_INDEX:
      return getMAugIndex();

    case M_PATH:
      return getMPath();

    case M_UKEY:
      return getMUKey();

    case M_UVALUE:
      return getMUValue();

    case M_DELETE_ATTRIBUTE:
      return isMDeleteAttribute();

    case DATASET:
      return getDataset();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PINNED:
      return isSetPinned();
    case TTL:
      return isSetTtl();
    case PERSISTED:
      return isSetPersisted();
    case OWNER:
      return isSetOwner();
    case GROUP:
      return isSetGroup();
    case MODE:
      return isSetMode();
    case RECURSIVE:
      return isSetRecursive();
    case TTL_ACTION:
      return isSetTtlAction();
    case M_INDEX_INFO__BLOCK_ID:
      return isSetMIndexInfo_BlockId();
    case M_INDEX_INFO__MAX_VALUE:
      return isSetMIndexInfo_MaxValue();
    case M_INDEX_INFO__MIN_VALUE:
      return isSetMIndexInfo_MinValue();
    case M_INDEX_INFO__VAR_NAME:
      return isSetMIndexInfo_VarName();
    case M_AUG_INDEX:
      return isSetMAugIndex();
    case M_PATH:
      return isSetMPath();
    case M_UKEY:
      return isSetMUKey();
    case M_UVALUE:
      return isSetMUValue();
    case M_DELETE_ATTRIBUTE:
      return isSetMDeleteAttribute();
    case DATASET:
      return isSetDataset();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SetAttributeTOptions)
      return this.equals((SetAttributeTOptions)that);
    return false;
  }

  public boolean equals(SetAttributeTOptions that) {
    if (that == null)
      return false;

    boolean this_present_pinned = true && this.isSetPinned();
    boolean that_present_pinned = true && that.isSetPinned();
    if (this_present_pinned || that_present_pinned) {
      if (!(this_present_pinned && that_present_pinned))
        return false;
      if (this.pinned != that.pinned)
        return false;
    }

    boolean this_present_ttl = true && this.isSetTtl();
    boolean that_present_ttl = true && that.isSetTtl();
    if (this_present_ttl || that_present_ttl) {
      if (!(this_present_ttl && that_present_ttl))
        return false;
      if (this.ttl != that.ttl)
        return false;
    }

    boolean this_present_persisted = true && this.isSetPersisted();
    boolean that_present_persisted = true && that.isSetPersisted();
    if (this_present_persisted || that_present_persisted) {
      if (!(this_present_persisted && that_present_persisted))
        return false;
      if (this.persisted != that.persisted)
        return false;
    }

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_group = true && this.isSetGroup();
    boolean that_present_group = true && that.isSetGroup();
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group))
        return false;
      if (!this.group.equals(that.group))
        return false;
    }

    boolean this_present_mode = true && this.isSetMode();
    boolean that_present_mode = true && that.isSetMode();
    if (this_present_mode || that_present_mode) {
      if (!(this_present_mode && that_present_mode))
        return false;
      if (this.mode != that.mode)
        return false;
    }

    boolean this_present_recursive = true && this.isSetRecursive();
    boolean that_present_recursive = true && that.isSetRecursive();
    if (this_present_recursive || that_present_recursive) {
      if (!(this_present_recursive && that_present_recursive))
        return false;
      if (this.recursive != that.recursive)
        return false;
    }

    boolean this_present_ttlAction = true && this.isSetTtlAction();
    boolean that_present_ttlAction = true && that.isSetTtlAction();
    if (this_present_ttlAction || that_present_ttlAction) {
      if (!(this_present_ttlAction && that_present_ttlAction))
        return false;
      if (!this.ttlAction.equals(that.ttlAction))
        return false;
    }

    boolean this_present_mIndexInfo_BlockId = true && this.isSetMIndexInfo_BlockId();
    boolean that_present_mIndexInfo_BlockId = true && that.isSetMIndexInfo_BlockId();
    if (this_present_mIndexInfo_BlockId || that_present_mIndexInfo_BlockId) {
      if (!(this_present_mIndexInfo_BlockId && that_present_mIndexInfo_BlockId))
        return false;
      if (!this.mIndexInfo_BlockId.equals(that.mIndexInfo_BlockId))
        return false;
    }

    boolean this_present_mIndexInfo_MaxValue = true && this.isSetMIndexInfo_MaxValue();
    boolean that_present_mIndexInfo_MaxValue = true && that.isSetMIndexInfo_MaxValue();
    if (this_present_mIndexInfo_MaxValue || that_present_mIndexInfo_MaxValue) {
      if (!(this_present_mIndexInfo_MaxValue && that_present_mIndexInfo_MaxValue))
        return false;
      if (!this.mIndexInfo_MaxValue.equals(that.mIndexInfo_MaxValue))
        return false;
    }

    boolean this_present_mIndexInfo_MinValue = true && this.isSetMIndexInfo_MinValue();
    boolean that_present_mIndexInfo_MinValue = true && that.isSetMIndexInfo_MinValue();
    if (this_present_mIndexInfo_MinValue || that_present_mIndexInfo_MinValue) {
      if (!(this_present_mIndexInfo_MinValue && that_present_mIndexInfo_MinValue))
        return false;
      if (!this.mIndexInfo_MinValue.equals(that.mIndexInfo_MinValue))
        return false;
    }

    boolean this_present_mIndexInfo_VarName = true && this.isSetMIndexInfo_VarName();
    boolean that_present_mIndexInfo_VarName = true && that.isSetMIndexInfo_VarName();
    if (this_present_mIndexInfo_VarName || that_present_mIndexInfo_VarName) {
      if (!(this_present_mIndexInfo_VarName && that_present_mIndexInfo_VarName))
        return false;
      if (!this.mIndexInfo_VarName.equals(that.mIndexInfo_VarName))
        return false;
    }

    boolean this_present_mAugIndex = true && this.isSetMAugIndex();
    boolean that_present_mAugIndex = true && that.isSetMAugIndex();
    if (this_present_mAugIndex || that_present_mAugIndex) {
      if (!(this_present_mAugIndex && that_present_mAugIndex))
        return false;
      if (!this.mAugIndex.equals(that.mAugIndex))
        return false;
    }

    boolean this_present_mPath = true && this.isSetMPath();
    boolean that_present_mPath = true && that.isSetMPath();
    if (this_present_mPath || that_present_mPath) {
      if (!(this_present_mPath && that_present_mPath))
        return false;
      if (!this.mPath.equals(that.mPath))
        return false;
    }

    boolean this_present_mUKey = true && this.isSetMUKey();
    boolean that_present_mUKey = true && that.isSetMUKey();
    if (this_present_mUKey || that_present_mUKey) {
      if (!(this_present_mUKey && that_present_mUKey))
        return false;
      if (!this.mUKey.equals(that.mUKey))
        return false;
    }

    boolean this_present_mUValue = true && this.isSetMUValue();
    boolean that_present_mUValue = true && that.isSetMUValue();
    if (this_present_mUValue || that_present_mUValue) {
      if (!(this_present_mUValue && that_present_mUValue))
        return false;
      if (!this.mUValue.equals(that.mUValue))
        return false;
    }

    boolean this_present_mDeleteAttribute = true && this.isSetMDeleteAttribute();
    boolean that_present_mDeleteAttribute = true && that.isSetMDeleteAttribute();
    if (this_present_mDeleteAttribute || that_present_mDeleteAttribute) {
      if (!(this_present_mDeleteAttribute && that_present_mDeleteAttribute))
        return false;
      if (this.mDeleteAttribute != that.mDeleteAttribute)
        return false;
    }

    boolean this_present_dataset = true && this.isSetDataset();
    boolean that_present_dataset = true && that.isSetDataset();
    if (this_present_dataset || that_present_dataset) {
      if (!(this_present_dataset && that_present_dataset))
        return false;
      if (!this.dataset.equals(that.dataset))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pinned = true && (isSetPinned());
    list.add(present_pinned);
    if (present_pinned)
      list.add(pinned);

    boolean present_ttl = true && (isSetTtl());
    list.add(present_ttl);
    if (present_ttl)
      list.add(ttl);

    boolean present_persisted = true && (isSetPersisted());
    list.add(present_persisted);
    if (present_persisted)
      list.add(persisted);

    boolean present_owner = true && (isSetOwner());
    list.add(present_owner);
    if (present_owner)
      list.add(owner);

    boolean present_group = true && (isSetGroup());
    list.add(present_group);
    if (present_group)
      list.add(group);

    boolean present_mode = true && (isSetMode());
    list.add(present_mode);
    if (present_mode)
      list.add(mode);

    boolean present_recursive = true && (isSetRecursive());
    list.add(present_recursive);
    if (present_recursive)
      list.add(recursive);

    boolean present_ttlAction = true && (isSetTtlAction());
    list.add(present_ttlAction);
    if (present_ttlAction)
      list.add(ttlAction.getValue());

    boolean present_mIndexInfo_BlockId = true && (isSetMIndexInfo_BlockId());
    list.add(present_mIndexInfo_BlockId);
    if (present_mIndexInfo_BlockId)
      list.add(mIndexInfo_BlockId);

    boolean present_mIndexInfo_MaxValue = true && (isSetMIndexInfo_MaxValue());
    list.add(present_mIndexInfo_MaxValue);
    if (present_mIndexInfo_MaxValue)
      list.add(mIndexInfo_MaxValue);

    boolean present_mIndexInfo_MinValue = true && (isSetMIndexInfo_MinValue());
    list.add(present_mIndexInfo_MinValue);
    if (present_mIndexInfo_MinValue)
      list.add(mIndexInfo_MinValue);

    boolean present_mIndexInfo_VarName = true && (isSetMIndexInfo_VarName());
    list.add(present_mIndexInfo_VarName);
    if (present_mIndexInfo_VarName)
      list.add(mIndexInfo_VarName);

    boolean present_mAugIndex = true && (isSetMAugIndex());
    list.add(present_mAugIndex);
    if (present_mAugIndex)
      list.add(mAugIndex);

    boolean present_mPath = true && (isSetMPath());
    list.add(present_mPath);
    if (present_mPath)
      list.add(mPath);

    boolean present_mUKey = true && (isSetMUKey());
    list.add(present_mUKey);
    if (present_mUKey)
      list.add(mUKey);

    boolean present_mUValue = true && (isSetMUValue());
    list.add(present_mUValue);
    if (present_mUValue)
      list.add(mUValue);

    boolean present_mDeleteAttribute = true && (isSetMDeleteAttribute());
    list.add(present_mDeleteAttribute);
    if (present_mDeleteAttribute)
      list.add(mDeleteAttribute);

    boolean present_dataset = true && (isSetDataset());
    list.add(present_dataset);
    if (present_dataset)
      list.add(dataset);

    return list.hashCode();
  }

  @Override
  public int compareTo(SetAttributeTOptions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPinned()).compareTo(other.isSetPinned());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPinned()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pinned, other.pinned);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTtl()).compareTo(other.isSetTtl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTtl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ttl, other.ttl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPersisted()).compareTo(other.isSetPersisted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPersisted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.persisted, other.persisted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwner()).compareTo(other.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, other.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMode()).compareTo(other.isSetMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, other.mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecursive()).compareTo(other.isSetRecursive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecursive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recursive, other.recursive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTtlAction()).compareTo(other.isSetTtlAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTtlAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ttlAction, other.ttlAction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMIndexInfo_BlockId()).compareTo(other.isSetMIndexInfo_BlockId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMIndexInfo_BlockId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mIndexInfo_BlockId, other.mIndexInfo_BlockId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMIndexInfo_MaxValue()).compareTo(other.isSetMIndexInfo_MaxValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMIndexInfo_MaxValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mIndexInfo_MaxValue, other.mIndexInfo_MaxValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMIndexInfo_MinValue()).compareTo(other.isSetMIndexInfo_MinValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMIndexInfo_MinValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mIndexInfo_MinValue, other.mIndexInfo_MinValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMIndexInfo_VarName()).compareTo(other.isSetMIndexInfo_VarName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMIndexInfo_VarName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mIndexInfo_VarName, other.mIndexInfo_VarName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMAugIndex()).compareTo(other.isSetMAugIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMAugIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mAugIndex, other.mAugIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMPath()).compareTo(other.isSetMPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mPath, other.mPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMUKey()).compareTo(other.isSetMUKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMUKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mUKey, other.mUKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMUValue()).compareTo(other.isSetMUValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMUValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mUValue, other.mUValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMDeleteAttribute()).compareTo(other.isSetMDeleteAttribute());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMDeleteAttribute()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mDeleteAttribute, other.mDeleteAttribute);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataset()).compareTo(other.isSetDataset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataset, other.dataset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SetAttributeTOptions(");
    boolean first = true;

    if (isSetPinned()) {
      sb.append("pinned:");
      sb.append(this.pinned);
      first = false;
    }
    if (isSetTtl()) {
      if (!first) sb.append(", ");
      sb.append("ttl:");
      sb.append(this.ttl);
      first = false;
    }
    if (isSetPersisted()) {
      if (!first) sb.append(", ");
      sb.append("persisted:");
      sb.append(this.persisted);
      first = false;
    }
    if (isSetOwner()) {
      if (!first) sb.append(", ");
      sb.append("owner:");
      if (this.owner == null) {
        sb.append("null");
      } else {
        sb.append(this.owner);
      }
      first = false;
    }
    if (isSetGroup()) {
      if (!first) sb.append(", ");
      sb.append("group:");
      if (this.group == null) {
        sb.append("null");
      } else {
        sb.append(this.group);
      }
      first = false;
    }
    if (isSetMode()) {
      if (!first) sb.append(", ");
      sb.append("mode:");
      sb.append(this.mode);
      first = false;
    }
    if (isSetRecursive()) {
      if (!first) sb.append(", ");
      sb.append("recursive:");
      sb.append(this.recursive);
      first = false;
    }
    if (isSetTtlAction()) {
      if (!first) sb.append(", ");
      sb.append("ttlAction:");
      if (this.ttlAction == null) {
        sb.append("null");
      } else {
        sb.append(this.ttlAction);
      }
      first = false;
    }
    if (isSetMIndexInfo_BlockId()) {
      if (!first) sb.append(", ");
      sb.append("mIndexInfo_BlockId:");
      if (this.mIndexInfo_BlockId == null) {
        sb.append("null");
      } else {
        sb.append(this.mIndexInfo_BlockId);
      }
      first = false;
    }
    if (isSetMIndexInfo_MaxValue()) {
      if (!first) sb.append(", ");
      sb.append("mIndexInfo_MaxValue:");
      if (this.mIndexInfo_MaxValue == null) {
        sb.append("null");
      } else {
        sb.append(this.mIndexInfo_MaxValue);
      }
      first = false;
    }
    if (isSetMIndexInfo_MinValue()) {
      if (!first) sb.append(", ");
      sb.append("mIndexInfo_MinValue:");
      if (this.mIndexInfo_MinValue == null) {
        sb.append("null");
      } else {
        sb.append(this.mIndexInfo_MinValue);
      }
      first = false;
    }
    if (isSetMIndexInfo_VarName()) {
      if (!first) sb.append(", ");
      sb.append("mIndexInfo_VarName:");
      if (this.mIndexInfo_VarName == null) {
        sb.append("null");
      } else {
        sb.append(this.mIndexInfo_VarName);
      }
      first = false;
    }
    if (isSetMAugIndex()) {
      if (!first) sb.append(", ");
      sb.append("mAugIndex:");
      if (this.mAugIndex == null) {
        sb.append("null");
      } else {
        sb.append(this.mAugIndex);
      }
      first = false;
    }
    if (isSetMPath()) {
      if (!first) sb.append(", ");
      sb.append("mPath:");
      if (this.mPath == null) {
        sb.append("null");
      } else {
        sb.append(this.mPath);
      }
      first = false;
    }
    if (isSetMUKey()) {
      if (!first) sb.append(", ");
      sb.append("mUKey:");
      if (this.mUKey == null) {
        sb.append("null");
      } else {
        sb.append(this.mUKey);
      }
      first = false;
    }
    if (isSetMUValue()) {
      if (!first) sb.append(", ");
      sb.append("mUValue:");
      if (this.mUValue == null) {
        sb.append("null");
      } else {
        sb.append(this.mUValue);
      }
      first = false;
    }
    if (isSetMDeleteAttribute()) {
      if (!first) sb.append(", ");
      sb.append("mDeleteAttribute:");
      sb.append(this.mDeleteAttribute);
      first = false;
    }
    if (isSetDataset()) {
      if (!first) sb.append(", ");
      sb.append("dataset:");
      if (this.dataset == null) {
        sb.append("null");
      } else {
        sb.append(this.dataset);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SetAttributeTOptionsStandardSchemeFactory implements SchemeFactory {
    public SetAttributeTOptionsStandardScheme getScheme() {
      return new SetAttributeTOptionsStandardScheme();
    }
  }

  private static class SetAttributeTOptionsStandardScheme extends StandardScheme<SetAttributeTOptions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SetAttributeTOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PINNED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.pinned = iprot.readBool();
              struct.setPinnedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TTL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ttl = iprot.readI64();
              struct.setTtlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PERSISTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.persisted = iprot.readBool();
              struct.setPersistedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owner = iprot.readString();
              struct.setOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.group = iprot.readString();
              struct.setGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.mode = iprot.readI16();
              struct.setModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RECURSIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.recursive = iprot.readBool();
              struct.setRecursiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TTL_ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ttlAction = alluxio.thrift.TTtlAction.findByValue(iprot.readI32());
              struct.setTtlActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // M_INDEX_INFO__BLOCK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list118 = iprot.readListBegin();
                struct.mIndexInfo_BlockId = new ArrayList<Long>(_list118.size);
                long _elem119;
                for (int _i120 = 0; _i120 < _list118.size; ++_i120)
                {
                  _elem119 = iprot.readI64();
                  struct.mIndexInfo_BlockId.add(_elem119);
                }
                iprot.readListEnd();
              }
              struct.setMIndexInfo_BlockIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // M_INDEX_INFO__MAX_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list121 = iprot.readListBegin();
                struct.mIndexInfo_MaxValue = new ArrayList<Double>(_list121.size);
                double _elem122;
                for (int _i123 = 0; _i123 < _list121.size; ++_i123)
                {
                  _elem122 = iprot.readDouble();
                  struct.mIndexInfo_MaxValue.add(_elem122);
                }
                iprot.readListEnd();
              }
              struct.setMIndexInfo_MaxValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // M_INDEX_INFO__MIN_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list124 = iprot.readListBegin();
                struct.mIndexInfo_MinValue = new ArrayList<Double>(_list124.size);
                double _elem125;
                for (int _i126 = 0; _i126 < _list124.size; ++_i126)
                {
                  _elem125 = iprot.readDouble();
                  struct.mIndexInfo_MinValue.add(_elem125);
                }
                iprot.readListEnd();
              }
              struct.setMIndexInfo_MinValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // M_INDEX_INFO__VAR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list127 = iprot.readListBegin();
                struct.mIndexInfo_VarName = new ArrayList<String>(_list127.size);
                String _elem128;
                for (int _i129 = 0; _i129 < _list127.size; ++_i129)
                {
                  _elem128 = iprot.readString();
                  struct.mIndexInfo_VarName.add(_elem128);
                }
                iprot.readListEnd();
              }
              struct.setMIndexInfo_VarNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // M_AUG_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list130 = iprot.readListBegin();
                struct.mAugIndex = new ArrayList<Long>(_list130.size);
                long _elem131;
                for (int _i132 = 0; _i132 < _list130.size; ++_i132)
                {
                  _elem131 = iprot.readI64();
                  struct.mAugIndex.add(_elem131);
                }
                iprot.readListEnd();
              }
              struct.setMAugIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // M_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list133 = iprot.readListBegin();
                struct.mPath = new ArrayList<String>(_list133.size);
                String _elem134;
                for (int _i135 = 0; _i135 < _list133.size; ++_i135)
                {
                  _elem134 = iprot.readString();
                  struct.mPath.add(_elem134);
                }
                iprot.readListEnd();
              }
              struct.setMPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // M_UKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                struct.mUKey = new ArrayList<String>(_list136.size);
                String _elem137;
                for (int _i138 = 0; _i138 < _list136.size; ++_i138)
                {
                  _elem137 = iprot.readString();
                  struct.mUKey.add(_elem137);
                }
                iprot.readListEnd();
              }
              struct.setMUKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // M_UVALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list139 = iprot.readListBegin();
                struct.mUValue = new ArrayList<String>(_list139.size);
                String _elem140;
                for (int _i141 = 0; _i141 < _list139.size; ++_i141)
                {
                  _elem140 = iprot.readString();
                  struct.mUValue.add(_elem140);
                }
                iprot.readListEnd();
              }
              struct.setMUValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // M_DELETE_ATTRIBUTE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.mDeleteAttribute = iprot.readBool();
              struct.setMDeleteAttributeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // DATASET
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list142 = iprot.readListBegin();
                struct.dataset = new ArrayList<alluxio.thrift.H5DatasetInfo>(_list142.size);
                alluxio.thrift.H5DatasetInfo _elem143;
                for (int _i144 = 0; _i144 < _list142.size; ++_i144)
                {
                  _elem143 = new alluxio.thrift.H5DatasetInfo();
                  _elem143.read(iprot);
                  struct.dataset.add(_elem143);
                }
                iprot.readListEnd();
              }
              struct.setDatasetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SetAttributeTOptions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetPinned()) {
        oprot.writeFieldBegin(PINNED_FIELD_DESC);
        oprot.writeBool(struct.pinned);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTtl()) {
        oprot.writeFieldBegin(TTL_FIELD_DESC);
        oprot.writeI64(struct.ttl);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPersisted()) {
        oprot.writeFieldBegin(PERSISTED_FIELD_DESC);
        oprot.writeBool(struct.persisted);
        oprot.writeFieldEnd();
      }
      if (struct.owner != null) {
        if (struct.isSetOwner()) {
          oprot.writeFieldBegin(OWNER_FIELD_DESC);
          oprot.writeString(struct.owner);
          oprot.writeFieldEnd();
        }
      }
      if (struct.group != null) {
        if (struct.isSetGroup()) {
          oprot.writeFieldBegin(GROUP_FIELD_DESC);
          oprot.writeString(struct.group);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMode()) {
        oprot.writeFieldBegin(MODE_FIELD_DESC);
        oprot.writeI16(struct.mode);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRecursive()) {
        oprot.writeFieldBegin(RECURSIVE_FIELD_DESC);
        oprot.writeBool(struct.recursive);
        oprot.writeFieldEnd();
      }
      if (struct.ttlAction != null) {
        if (struct.isSetTtlAction()) {
          oprot.writeFieldBegin(TTL_ACTION_FIELD_DESC);
          oprot.writeI32(struct.ttlAction.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.mIndexInfo_BlockId != null) {
        if (struct.isSetMIndexInfo_BlockId()) {
          oprot.writeFieldBegin(M_INDEX_INFO__BLOCK_ID_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.mIndexInfo_BlockId.size()));
            for (long _iter145 : struct.mIndexInfo_BlockId)
            {
              oprot.writeI64(_iter145);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.mIndexInfo_MaxValue != null) {
        if (struct.isSetMIndexInfo_MaxValue()) {
          oprot.writeFieldBegin(M_INDEX_INFO__MAX_VALUE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.mIndexInfo_MaxValue.size()));
            for (double _iter146 : struct.mIndexInfo_MaxValue)
            {
              oprot.writeDouble(_iter146);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.mIndexInfo_MinValue != null) {
        if (struct.isSetMIndexInfo_MinValue()) {
          oprot.writeFieldBegin(M_INDEX_INFO__MIN_VALUE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.mIndexInfo_MinValue.size()));
            for (double _iter147 : struct.mIndexInfo_MinValue)
            {
              oprot.writeDouble(_iter147);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.mIndexInfo_VarName != null) {
        if (struct.isSetMIndexInfo_VarName()) {
          oprot.writeFieldBegin(M_INDEX_INFO__VAR_NAME_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.mIndexInfo_VarName.size()));
            for (String _iter148 : struct.mIndexInfo_VarName)
            {
              oprot.writeString(_iter148);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.mAugIndex != null) {
        if (struct.isSetMAugIndex()) {
          oprot.writeFieldBegin(M_AUG_INDEX_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.mAugIndex.size()));
            for (long _iter149 : struct.mAugIndex)
            {
              oprot.writeI64(_iter149);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.mPath != null) {
        if (struct.isSetMPath()) {
          oprot.writeFieldBegin(M_PATH_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.mPath.size()));
            for (String _iter150 : struct.mPath)
            {
              oprot.writeString(_iter150);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.mUKey != null) {
        if (struct.isSetMUKey()) {
          oprot.writeFieldBegin(M_UKEY_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.mUKey.size()));
            for (String _iter151 : struct.mUKey)
            {
              oprot.writeString(_iter151);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.mUValue != null) {
        if (struct.isSetMUValue()) {
          oprot.writeFieldBegin(M_UVALUE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.mUValue.size()));
            for (String _iter152 : struct.mUValue)
            {
              oprot.writeString(_iter152);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMDeleteAttribute()) {
        oprot.writeFieldBegin(M_DELETE_ATTRIBUTE_FIELD_DESC);
        oprot.writeBool(struct.mDeleteAttribute);
        oprot.writeFieldEnd();
      }
      if (struct.dataset != null) {
        if (struct.isSetDataset()) {
          oprot.writeFieldBegin(DATASET_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.dataset.size()));
            for (alluxio.thrift.H5DatasetInfo _iter153 : struct.dataset)
            {
              _iter153.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SetAttributeTOptionsTupleSchemeFactory implements SchemeFactory {
    public SetAttributeTOptionsTupleScheme getScheme() {
      return new SetAttributeTOptionsTupleScheme();
    }
  }

  private static class SetAttributeTOptionsTupleScheme extends TupleScheme<SetAttributeTOptions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SetAttributeTOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPinned()) {
        optionals.set(0);
      }
      if (struct.isSetTtl()) {
        optionals.set(1);
      }
      if (struct.isSetPersisted()) {
        optionals.set(2);
      }
      if (struct.isSetOwner()) {
        optionals.set(3);
      }
      if (struct.isSetGroup()) {
        optionals.set(4);
      }
      if (struct.isSetMode()) {
        optionals.set(5);
      }
      if (struct.isSetRecursive()) {
        optionals.set(6);
      }
      if (struct.isSetTtlAction()) {
        optionals.set(7);
      }
      if (struct.isSetMIndexInfo_BlockId()) {
        optionals.set(8);
      }
      if (struct.isSetMIndexInfo_MaxValue()) {
        optionals.set(9);
      }
      if (struct.isSetMIndexInfo_MinValue()) {
        optionals.set(10);
      }
      if (struct.isSetMIndexInfo_VarName()) {
        optionals.set(11);
      }
      if (struct.isSetMAugIndex()) {
        optionals.set(12);
      }
      if (struct.isSetMPath()) {
        optionals.set(13);
      }
      if (struct.isSetMUKey()) {
        optionals.set(14);
      }
      if (struct.isSetMUValue()) {
        optionals.set(15);
      }
      if (struct.isSetMDeleteAttribute()) {
        optionals.set(16);
      }
      if (struct.isSetDataset()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetPinned()) {
        oprot.writeBool(struct.pinned);
      }
      if (struct.isSetTtl()) {
        oprot.writeI64(struct.ttl);
      }
      if (struct.isSetPersisted()) {
        oprot.writeBool(struct.persisted);
      }
      if (struct.isSetOwner()) {
        oprot.writeString(struct.owner);
      }
      if (struct.isSetGroup()) {
        oprot.writeString(struct.group);
      }
      if (struct.isSetMode()) {
        oprot.writeI16(struct.mode);
      }
      if (struct.isSetRecursive()) {
        oprot.writeBool(struct.recursive);
      }
      if (struct.isSetTtlAction()) {
        oprot.writeI32(struct.ttlAction.getValue());
      }
      if (struct.isSetMIndexInfo_BlockId()) {
        {
          oprot.writeI32(struct.mIndexInfo_BlockId.size());
          for (long _iter154 : struct.mIndexInfo_BlockId)
          {
            oprot.writeI64(_iter154);
          }
        }
      }
      if (struct.isSetMIndexInfo_MaxValue()) {
        {
          oprot.writeI32(struct.mIndexInfo_MaxValue.size());
          for (double _iter155 : struct.mIndexInfo_MaxValue)
          {
            oprot.writeDouble(_iter155);
          }
        }
      }
      if (struct.isSetMIndexInfo_MinValue()) {
        {
          oprot.writeI32(struct.mIndexInfo_MinValue.size());
          for (double _iter156 : struct.mIndexInfo_MinValue)
          {
            oprot.writeDouble(_iter156);
          }
        }
      }
      if (struct.isSetMIndexInfo_VarName()) {
        {
          oprot.writeI32(struct.mIndexInfo_VarName.size());
          for (String _iter157 : struct.mIndexInfo_VarName)
          {
            oprot.writeString(_iter157);
          }
        }
      }
      if (struct.isSetMAugIndex()) {
        {
          oprot.writeI32(struct.mAugIndex.size());
          for (long _iter158 : struct.mAugIndex)
          {
            oprot.writeI64(_iter158);
          }
        }
      }
      if (struct.isSetMPath()) {
        {
          oprot.writeI32(struct.mPath.size());
          for (String _iter159 : struct.mPath)
          {
            oprot.writeString(_iter159);
          }
        }
      }
      if (struct.isSetMUKey()) {
        {
          oprot.writeI32(struct.mUKey.size());
          for (String _iter160 : struct.mUKey)
          {
            oprot.writeString(_iter160);
          }
        }
      }
      if (struct.isSetMUValue()) {
        {
          oprot.writeI32(struct.mUValue.size());
          for (String _iter161 : struct.mUValue)
          {
            oprot.writeString(_iter161);
          }
        }
      }
      if (struct.isSetMDeleteAttribute()) {
        oprot.writeBool(struct.mDeleteAttribute);
      }
      if (struct.isSetDataset()) {
        {
          oprot.writeI32(struct.dataset.size());
          for (alluxio.thrift.H5DatasetInfo _iter162 : struct.dataset)
          {
            _iter162.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SetAttributeTOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.pinned = iprot.readBool();
        struct.setPinnedIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ttl = iprot.readI64();
        struct.setTtlIsSet(true);
      }
      if (incoming.get(2)) {
        struct.persisted = iprot.readBool();
        struct.setPersistedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.owner = iprot.readString();
        struct.setOwnerIsSet(true);
      }
      if (incoming.get(4)) {
        struct.group = iprot.readString();
        struct.setGroupIsSet(true);
      }
      if (incoming.get(5)) {
        struct.mode = iprot.readI16();
        struct.setModeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.recursive = iprot.readBool();
        struct.setRecursiveIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ttlAction = alluxio.thrift.TTtlAction.findByValue(iprot.readI32());
        struct.setTtlActionIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list163 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.mIndexInfo_BlockId = new ArrayList<Long>(_list163.size);
          long _elem164;
          for (int _i165 = 0; _i165 < _list163.size; ++_i165)
          {
            _elem164 = iprot.readI64();
            struct.mIndexInfo_BlockId.add(_elem164);
          }
        }
        struct.setMIndexInfo_BlockIdIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list166 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.mIndexInfo_MaxValue = new ArrayList<Double>(_list166.size);
          double _elem167;
          for (int _i168 = 0; _i168 < _list166.size; ++_i168)
          {
            _elem167 = iprot.readDouble();
            struct.mIndexInfo_MaxValue.add(_elem167);
          }
        }
        struct.setMIndexInfo_MaxValueIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list169 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.mIndexInfo_MinValue = new ArrayList<Double>(_list169.size);
          double _elem170;
          for (int _i171 = 0; _i171 < _list169.size; ++_i171)
          {
            _elem170 = iprot.readDouble();
            struct.mIndexInfo_MinValue.add(_elem170);
          }
        }
        struct.setMIndexInfo_MinValueIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list172 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.mIndexInfo_VarName = new ArrayList<String>(_list172.size);
          String _elem173;
          for (int _i174 = 0; _i174 < _list172.size; ++_i174)
          {
            _elem173 = iprot.readString();
            struct.mIndexInfo_VarName.add(_elem173);
          }
        }
        struct.setMIndexInfo_VarNameIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list175 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.mAugIndex = new ArrayList<Long>(_list175.size);
          long _elem176;
          for (int _i177 = 0; _i177 < _list175.size; ++_i177)
          {
            _elem176 = iprot.readI64();
            struct.mAugIndex.add(_elem176);
          }
        }
        struct.setMAugIndexIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list178 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.mPath = new ArrayList<String>(_list178.size);
          String _elem179;
          for (int _i180 = 0; _i180 < _list178.size; ++_i180)
          {
            _elem179 = iprot.readString();
            struct.mPath.add(_elem179);
          }
        }
        struct.setMPathIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list181 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.mUKey = new ArrayList<String>(_list181.size);
          String _elem182;
          for (int _i183 = 0; _i183 < _list181.size; ++_i183)
          {
            _elem182 = iprot.readString();
            struct.mUKey.add(_elem182);
          }
        }
        struct.setMUKeyIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list184 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.mUValue = new ArrayList<String>(_list184.size);
          String _elem185;
          for (int _i186 = 0; _i186 < _list184.size; ++_i186)
          {
            _elem185 = iprot.readString();
            struct.mUValue.add(_elem185);
          }
        }
        struct.setMUValueIsSet(true);
      }
      if (incoming.get(16)) {
        struct.mDeleteAttribute = iprot.readBool();
        struct.setMDeleteAttributeIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list187 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.dataset = new ArrayList<alluxio.thrift.H5DatasetInfo>(_list187.size);
          alluxio.thrift.H5DatasetInfo _elem188;
          for (int _i189 = 0; _i189 < _list187.size; ++_i189)
          {
            _elem188 = new alluxio.thrift.H5DatasetInfo();
            _elem188.read(iprot);
            struct.dataset.add(_elem188);
          }
        }
        struct.setDatasetIsSet(true);
      }
    }
  }

}

