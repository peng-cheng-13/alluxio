/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package alluxio.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class SetAttributeTOptions implements org.apache.thrift.TBase<SetAttributeTOptions, SetAttributeTOptions._Fields>, java.io.Serializable, Cloneable, Comparable<SetAttributeTOptions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetAttributeTOptions");

  private static final org.apache.thrift.protocol.TField PINNED_FIELD_DESC = new org.apache.thrift.protocol.TField("pinned", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField TTL_FIELD_DESC = new org.apache.thrift.protocol.TField("ttl", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField PERSISTED_FIELD_DESC = new org.apache.thrift.protocol.TField("persisted", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.I16, (short)6);
  private static final org.apache.thrift.protocol.TField RECURSIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("recursive", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField TTL_ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ttlAction", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField BLOCKID_FIELD_DESC = new org.apache.thrift.protocol.TField("mIndexInfo_BlockId", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField MAXVALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("mIndexInfo_MaxValue", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField MINVALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("mIndexInfo_MinValue", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField VARNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("mIndexInfo_VarName", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField AUGINDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("mAugIndex", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("mPath", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField UKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("mUKey", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField UVALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("mUValue", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField DELETEUDM_FIELD_DESC = new org.apache.thrift.protocol.TField("mDeleteAttribute", org.apache.thrift.protocol.TType.BOOL, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SetAttributeTOptionsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SetAttributeTOptionsTupleSchemeFactory());
  }

  private boolean pinned; // optional
  private long ttl; // optional
  private boolean persisted; // optional
  private String owner; // optional
  private String group; // optional
  private short mode; // optional
  private boolean recursive; // optional
  private alluxio.thrift.TTtlAction ttlAction; // optional
  private List<Long> mIndexInfo_BlockId = new ArrayList<Long>();
  private List<Double> mIndexInfo_MaxValue = new ArrayList<Double>();
  private List<Double> mIndexInfo_MinValue = new ArrayList<Double>();
  private List<String> mIndexInfo_VarName = new ArrayList<String>();
  private List<Long> mAugIndex = new ArrayList<Long>();
  private List<String> mPath = new ArrayList<String>();
  private List<String> mUKey = new ArrayList<String>();
  private List<String> mUValue = new ArrayList<String>();
  private boolean isIndex;
  private boolean mUDM;
  private boolean mDeleteAttribute;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PINNED((short)1, "pinned"),
    TTL((short)2, "ttl"),
    PERSISTED((short)3, "persisted"),
    OWNER((short)4, "owner"),
    GROUP((short)5, "group"),
    MODE((short)6, "mode"),
    RECURSIVE((short)7, "recursive"),
    /**
     * 
     * @see alluxio.thrift.TTtlAction
     */
    TTL_ACTION((short)8, "ttlAction"),
    BLOCKID((short)9, "mIndexInfo_BlockId"),
    MAXVALUE((short)10, "mIndexInfo_MaxValue"),
    MINVALUE((short)11, "mIndexInfo_MinValue"),
    VARNAME((short)12, "mIndexInfo_VarName"),
    AUGINDEX((short)13,"mAugIndex"),
    PATH((short)14,"mPath"),
    UKEY((short)15,"mUKey"),
    UVALUE((short)16,"mUValue"),
    DELETEUDM((short)17, "mDeleteAttribute");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PINNED
          return PINNED;
        case 2: // TTL
          return TTL;
        case 3: // PERSISTED
          return PERSISTED;
        case 4: // OWNER
          return OWNER;
        case 5: // GROUP
          return GROUP;
        case 6: // MODE
          return MODE;
        case 7: // RECURSIVE
          return RECURSIVE;
        case 8: // TTL_ACTION
          return TTL_ACTION;
        case 9: // BLOCKID
          return BLOCKID;
        case 10: // MAXVALUE
          return MAXVALUE;
        case 11: // MINVALUE
          return MINVALUE;
        case 12: // VARNAME
          return VARNAME;
        case 13: //AUGINDEX
          return AUGINDEX;
        case 14: //PATH
          return PATH;
        case 15: //UKEY
          return UKEY;
        case 16: //UVALUE
          return UVALUE;
        case 17: //DELETEUDM
          return DELETEUDM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PINNED_ISSET_ID = 0;
  private static final int __TTL_ISSET_ID = 1;
  private static final int __PERSISTED_ISSET_ID = 2;
  private static final int __MODE_ISSET_ID = 3;
  private static final int __RECURSIVE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PINNED,_Fields.TTL,_Fields.PERSISTED,_Fields.OWNER,_Fields.GROUP,_Fields.MODE,_Fields.RECURSIVE,_Fields.TTL_ACTION,_Fields.BLOCKID,_Fields.MAXVALUE,_Fields.MINVALUE,_Fields.VARNAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PINNED, new org.apache.thrift.meta_data.FieldMetaData("pinned", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TTL, new org.apache.thrift.meta_data.FieldMetaData("ttl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PERSISTED, new org.apache.thrift.meta_data.FieldMetaData("persisted", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.RECURSIVE, new org.apache.thrift.meta_data.FieldMetaData("recursive", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TTL_ACTION, new org.apache.thrift.meta_data.FieldMetaData("ttlAction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, alluxio.thrift.TTtlAction.class)));
    tmpMap.put(_Fields.BLOCKID, new org.apache.thrift.meta_data.FieldMetaData("mIndexInfo_BlockId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.MAXVALUE, new org.apache.thrift.meta_data.FieldMetaData("mIndexInfo_MaxValue",  org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.MINVALUE, new org.apache.thrift.meta_data.FieldMetaData("mIndexInfo_MinValue",  org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.VARNAME, new org.apache.thrift.meta_data.FieldMetaData("mIndexInfo_VarName",  org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.AUGINDEX, new org.apache.thrift.meta_data.FieldMetaData("mAugIndex", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("mPath",  org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.UKEY, new org.apache.thrift.meta_data.FieldMetaData("mUKey",  org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.UVALUE, new org.apache.thrift.meta_data.FieldMetaData("mUValue",  org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DELETEUDM, new org.apache.thrift.meta_data.FieldMetaData("mDeleteAttribute", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));

    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetAttributeTOptions.class, metaDataMap);
  }

  public SetAttributeTOptions() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SetAttributeTOptions(SetAttributeTOptions other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pinned = other.pinned;
    this.ttl = other.ttl;
    this.persisted = other.persisted;
    if (other.isSetOwner()) {
      this.owner = other.owner;
    }
    if (other.isSetGroup()) {
      this.group = other.group;
    }
    this.mode = other.mode;
    this.recursive = other.recursive;
    if (other.isSetTtlAction()) {
      this.ttlAction = other.ttlAction;
    }
    this.mIndexInfo_BlockId = other.mIndexInfo_BlockId;
    this.mIndexInfo_MaxValue = other.mIndexInfo_MaxValue;
    this.mIndexInfo_MinValue = other.mIndexInfo_MinValue;
    this.mIndexInfo_VarName = other.mIndexInfo_VarName;
    this.mAugIndex = other.mAugIndex;
    this.isIndex = other.isIndex;
    this.mUDM = other.mUDM;
    this.mPath = other.mPath;
    this.mUKey = other.mUKey;
    this.mUValue = other.mUValue;
    this.mDeleteAttribute = other.mDeleteAttribute;
  }

  public SetAttributeTOptions deepCopy() {
    return new SetAttributeTOptions(this);
  }

  @Override
  public void clear() {
    setPinnedIsSet(false);
    this.pinned = false;
    setTtlIsSet(false);
    this.ttl = 0;
    setPersistedIsSet(false);
    this.persisted = false;
    this.owner = null;
    this.group = null;
    setModeIsSet(false);
    this.mode = 0;
    setRecursiveIsSet(false);
    this.recursive = false;
    this.ttlAction = null;
    this.mIndexInfo_BlockId = null;
    this.mIndexInfo_MaxValue = null;
    this.mIndexInfo_MinValue = null;
    this.mIndexInfo_VarName = null;
    this.mAugIndex = null;
    this.isIndex = false;
    this.mUDM = false;
    this.mPath = null;
    this.mUKey = null;
    this.mUValue = null;
    this.mDeleteAttribute = false;
  }

  public void setUDM(List<String> pathlist, List<String> keylist, List<String> valuelist) {
    this.mUDM = true;
    this.mPath = pathlist;
    this.mUKey = keylist;
    this.mUValue = valuelist;
  }

  public void deleteUDM(List<String> pathlist, List<String> keylist, List<String> valuelist) {
    this.mUDM = true;
    this.mDeleteAttribute = true;
    this.mPath = pathlist;
    this.mUKey = keylist;
    this.mUValue = valuelist;
  }

  public List<String> getUDM_Path() {
    return this.mPath;
  }

  public List<String> getUDM_Key() {
    return this.mUKey;
  }

  public List<String> getUDM_Value() {
    return this.mUValue;
  }

  public boolean deleteUDM() {
    return this.mDeleteAttribute;
  }

  public void setIndexInfo(List<Long> id, List<Double> max, List<Double> min, List<String> var, List<Long> augindex) {
    this.isIndex = true;
    this.mIndexInfo_BlockId = id;
    this.mIndexInfo_MaxValue = max;
    this.mIndexInfo_MinValue = min;
    this.mIndexInfo_VarName = var;
    this.mAugIndex = augindex;
  }

  public List<Long> getIndexInfo_BlockId() {
    return this.mIndexInfo_BlockId;
  }

  public List<Double> getIndexInfo_Max() {
    return this.mIndexInfo_MaxValue; 
  }

  public List<Double> getIndexInfo_Min() {
    return this.mIndexInfo_MinValue;
  }

  public List<String> getIndexInfo_VarName() {
    return this.mIndexInfo_VarName;
  }

  public List<Long> getAugIndex() {
    return this.mAugIndex;
  }

  public boolean isPinned() {
    return this.pinned;
  }

  public SetAttributeTOptions setPinned(boolean pinned) {
    this.pinned = pinned;
    setPinnedIsSet(true);
    return this;
  }

  public void unsetPinned() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PINNED_ISSET_ID);
  }

  /** Returns true if field pinned is set (has been assigned a value) and false otherwise */
  public boolean isSetPinned() {
    return EncodingUtils.testBit(__isset_bitfield, __PINNED_ISSET_ID);
  }

  public void setPinnedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PINNED_ISSET_ID, value);
  }

  public long getTtl() {
    return this.ttl;
  }

  public SetAttributeTOptions setTtl(long ttl) {
    this.ttl = ttl;
    setTtlIsSet(true);
    return this;
  }

  public void unsetTtl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TTL_ISSET_ID);
  }

  /** Returns true if field ttl is set (has been assigned a value) and false otherwise */
  public boolean isSetTtl() {
    return EncodingUtils.testBit(__isset_bitfield, __TTL_ISSET_ID);
  }

  public void setTtlIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TTL_ISSET_ID, value);
  }

  public boolean isPersisted() {
    return this.persisted;
  }

  public SetAttributeTOptions setPersisted(boolean persisted) {
    this.persisted = persisted;
    setPersistedIsSet(true);
    return this;
  }

  public void unsetPersisted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERSISTED_ISSET_ID);
  }

  /** Returns true if field persisted is set (has been assigned a value) and false otherwise */
  public boolean isSetPersisted() {
    return EncodingUtils.testBit(__isset_bitfield, __PERSISTED_ISSET_ID);
  }

  public void setPersistedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERSISTED_ISSET_ID, value);
  }

  public String getOwner() {
    return this.owner;
  }

  public SetAttributeTOptions setOwner(String owner) {
    this.owner = owner;
    return this;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public String getGroup() {
    return this.group;
  }

  public SetAttributeTOptions setGroup(String group) {
    this.group = group;
    return this;
  }

  public void unsetGroup() {
    this.group = null;
  }

  /** Returns true if field group is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup() {
    return this.group != null;
  }

  public void setGroupIsSet(boolean value) {
    if (!value) {
      this.group = null;
    }
  }

  public short getMode() {
    return this.mode;
  }

  public SetAttributeTOptions setMode(short mode) {
    this.mode = mode;
    setModeIsSet(true);
    return this;
  }

  public void unsetMode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  /** Returns true if field mode is set (has been assigned a value) and false otherwise */
  public boolean isSetMode() {
    return EncodingUtils.testBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  public void setModeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODE_ISSET_ID, value);
  }

  public boolean isRecursive() {
    return this.recursive;
  }

  public SetAttributeTOptions setRecursive(boolean recursive) {
    this.recursive = recursive;
    setRecursiveIsSet(true);
    return this;
  }

  public void unsetRecursive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECURSIVE_ISSET_ID);
  }

  /** Returns true if field recursive is set (has been assigned a value) and false otherwise */
  public boolean isSetRecursive() {
    return EncodingUtils.testBit(__isset_bitfield, __RECURSIVE_ISSET_ID);
  }

  public void setRecursiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECURSIVE_ISSET_ID, value);
  }

  /**
   * 
   * @see alluxio.thrift.TTtlAction
   */
  public alluxio.thrift.TTtlAction getTtlAction() {
    return this.ttlAction;
  }

  /**
   * 
   * @see alluxio.thrift.TTtlAction
   */
  public SetAttributeTOptions setTtlAction(alluxio.thrift.TTtlAction ttlAction) {
    this.ttlAction = ttlAction;
    return this;
  }

  public void unsetTtlAction() {
    this.ttlAction = null;
  }

  /** Returns true if field ttlAction is set (has been assigned a value) and false otherwise */
  public boolean isSetTtlAction() {
    return this.ttlAction != null;
  }

  public void setTtlActionIsSet(boolean value) {
    if (!value) {
      this.ttlAction = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PINNED:
      if (value == null) {
        unsetPinned();
      } else {
        setPinned((Boolean)value);
      }
      break;

    case TTL:
      if (value == null) {
        unsetTtl();
      } else {
        setTtl((Long)value);
      }
      break;

    case PERSISTED:
      if (value == null) {
        unsetPersisted();
      } else {
        setPersisted((Boolean)value);
      }
      break;

    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((String)value);
      }
      break;

    case GROUP:
      if (value == null) {
        unsetGroup();
      } else {
        setGroup((String)value);
      }
      break;

    case MODE:
      if (value == null) {
        unsetMode();
      } else {
        setMode((Short)value);
      }
      break;

    case RECURSIVE:
      if (value == null) {
        unsetRecursive();
      } else {
        setRecursive((Boolean)value);
      }
      break;

    case TTL_ACTION:
      if (value == null) {
        unsetTtlAction();
      } else {
        setTtlAction((alluxio.thrift.TTtlAction)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PINNED:
      return isPinned();

    case TTL:
      return getTtl();

    case PERSISTED:
      return isPersisted();

    case OWNER:
      return getOwner();

    case GROUP:
      return getGroup();

    case MODE:
      return getMode();

    case RECURSIVE:
      return isRecursive();

    case TTL_ACTION:
      return getTtlAction();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PINNED:
      return isSetPinned();
    case TTL:
      return isSetTtl();
    case PERSISTED:
      return isSetPersisted();
    case OWNER:
      return isSetOwner();
    case GROUP:
      return isSetGroup();
    case MODE:
      return isSetMode();
    case RECURSIVE:
      return isSetRecursive();
    case TTL_ACTION:
      return isSetTtlAction();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SetAttributeTOptions)
      return this.equals((SetAttributeTOptions)that);
    return false;
  }

  public boolean equals(SetAttributeTOptions that) {
    if (that == null)
      return false;

    boolean this_present_pinned = true && this.isSetPinned();
    boolean that_present_pinned = true && that.isSetPinned();
    if (this_present_pinned || that_present_pinned) {
      if (!(this_present_pinned && that_present_pinned))
        return false;
      if (this.pinned != that.pinned)
        return false;
    }

    boolean this_present_ttl = true && this.isSetTtl();
    boolean that_present_ttl = true && that.isSetTtl();
    if (this_present_ttl || that_present_ttl) {
      if (!(this_present_ttl && that_present_ttl))
        return false;
      if (this.ttl != that.ttl)
        return false;
    }

    boolean this_present_persisted = true && this.isSetPersisted();
    boolean that_present_persisted = true && that.isSetPersisted();
    if (this_present_persisted || that_present_persisted) {
      if (!(this_present_persisted && that_present_persisted))
        return false;
      if (this.persisted != that.persisted)
        return false;
    }

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_group = true && this.isSetGroup();
    boolean that_present_group = true && that.isSetGroup();
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group))
        return false;
      if (!this.group.equals(that.group))
        return false;
    }

    boolean this_present_mode = true && this.isSetMode();
    boolean that_present_mode = true && that.isSetMode();
    if (this_present_mode || that_present_mode) {
      if (!(this_present_mode && that_present_mode))
        return false;
      if (this.mode != that.mode)
        return false;
    }

    boolean this_present_recursive = true && this.isSetRecursive();
    boolean that_present_recursive = true && that.isSetRecursive();
    if (this_present_recursive || that_present_recursive) {
      if (!(this_present_recursive && that_present_recursive))
        return false;
      if (this.recursive != that.recursive)
        return false;
    }

    boolean this_present_ttlAction = true && this.isSetTtlAction();
    boolean that_present_ttlAction = true && that.isSetTtlAction();
    if (this_present_ttlAction || that_present_ttlAction) {
      if (!(this_present_ttlAction && that_present_ttlAction))
        return false;
      if (!this.ttlAction.equals(that.ttlAction))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pinned = true && (isSetPinned());
    list.add(present_pinned);
    if (present_pinned)
      list.add(pinned);

    boolean present_ttl = true && (isSetTtl());
    list.add(present_ttl);
    if (present_ttl)
      list.add(ttl);

    boolean present_persisted = true && (isSetPersisted());
    list.add(present_persisted);
    if (present_persisted)
      list.add(persisted);

    boolean present_owner = true && (isSetOwner());
    list.add(present_owner);
    if (present_owner)
      list.add(owner);

    boolean present_group = true && (isSetGroup());
    list.add(present_group);
    if (present_group)
      list.add(group);

    boolean present_mode = true && (isSetMode());
    list.add(present_mode);
    if (present_mode)
      list.add(mode);

    boolean present_recursive = true && (isSetRecursive());
    list.add(present_recursive);
    if (present_recursive)
      list.add(recursive);

    boolean present_ttlAction = true && (isSetTtlAction());
    list.add(present_ttlAction);
    if (present_ttlAction)
      list.add(ttlAction.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(SetAttributeTOptions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPinned()).compareTo(other.isSetPinned());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPinned()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pinned, other.pinned);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTtl()).compareTo(other.isSetTtl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTtl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ttl, other.ttl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPersisted()).compareTo(other.isSetPersisted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPersisted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.persisted, other.persisted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwner()).compareTo(other.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, other.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMode()).compareTo(other.isSetMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, other.mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecursive()).compareTo(other.isSetRecursive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecursive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recursive, other.recursive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTtlAction()).compareTo(other.isSetTtlAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTtlAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ttlAction, other.ttlAction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SetAttributeTOptions(");
    boolean first = true;

    if (isSetPinned()) {
      sb.append("pinned:");
      sb.append(this.pinned);
      first = false;
    }
    if (isSetTtl()) {
      if (!first) sb.append(", ");
      sb.append("ttl:");
      sb.append(this.ttl);
      first = false;
    }
    if (isSetPersisted()) {
      if (!first) sb.append(", ");
      sb.append("persisted:");
      sb.append(this.persisted);
      first = false;
    }
    if (isSetOwner()) {
      if (!first) sb.append(", ");
      sb.append("owner:");
      if (this.owner == null) {
        sb.append("null");
      } else {
        sb.append(this.owner);
      }
      first = false;
    }
    if (isSetGroup()) {
      if (!first) sb.append(", ");
      sb.append("group:");
      if (this.group == null) {
        sb.append("null");
      } else {
        sb.append(this.group);
      }
      first = false;
    }
    if (isSetMode()) {
      if (!first) sb.append(", ");
      sb.append("mode:");
      sb.append(this.mode);
      first = false;
    }
    if (isSetRecursive()) {
      if (!first) sb.append(", ");
      sb.append("recursive:");
      sb.append(this.recursive);
      first = false;
    }
    if (isSetTtlAction()) {
      if (!first) sb.append(", ");
      sb.append("ttlAction:");
      if (this.ttlAction == null) {
        sb.append("null");
      } else {
        sb.append(this.ttlAction);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SetAttributeTOptionsStandardSchemeFactory implements SchemeFactory {
    public SetAttributeTOptionsStandardScheme getScheme() {
      return new SetAttributeTOptionsStandardScheme();
    }
  }

  private static class SetAttributeTOptionsStandardScheme extends StandardScheme<SetAttributeTOptions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SetAttributeTOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PINNED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.pinned = iprot.readBool();
              struct.setPinnedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TTL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ttl = iprot.readI64();
              struct.setTtlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PERSISTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.persisted = iprot.readBool();
              struct.setPersistedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owner = iprot.readString();
              struct.setOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.group = iprot.readString();
              struct.setGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.mode = iprot.readI16();
              struct.setModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RECURSIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.recursive = iprot.readBool();
              struct.setRecursiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TTL_ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ttlAction = alluxio.thrift.TTtlAction.findByValue(iprot.readI32());
              struct.setTtlActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BLOCKID
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.mIndexInfo_BlockId = new ArrayList<Long>(_list32.size);
                long _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34) {
                  _elem33 = iprot.readI64();
                  struct.mIndexInfo_BlockId.add(_elem33);
                }
                iprot.readListEnd();
              }
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: //MAXVALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.mIndexInfo_MaxValue = new ArrayList<Double>(_list32.size);
                double _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34) {
                  _elem33 = iprot.readDouble();
                  struct.mIndexInfo_MaxValue.add(_elem33);
                }
                iprot.readListEnd();
              }
            }else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: //MIVVALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.mIndexInfo_MinValue = new ArrayList<Double>(_list32.size);
                double _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34) {
                  _elem33 = iprot.readDouble();
                  struct.mIndexInfo_MinValue.add(_elem33);
                }
                iprot.readListEnd();
              }
            }else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: //VARNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.mIndexInfo_VarName = new ArrayList<String>(_list32.size);
                String _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34) {
                  _elem33 = iprot.readString();
                  struct.mIndexInfo_VarName.add(_elem33);
                }
                iprot.readListEnd();
              }
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: //AUGINDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.mAugIndex = new ArrayList<Long>(_list32.size);
                long _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34) {
                  _elem33 = iprot.readI64();
                  struct.mAugIndex.add(_elem33);
                }
                iprot.readListEnd();
              }
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: //PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.mPath = new ArrayList<String>(_list32.size);
                String _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34) {
                  _elem33 = iprot.readString();
                  struct.mPath.add(_elem33);
                }
                iprot.readListEnd();
              }
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: //UKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.mUKey = new ArrayList<String>(_list32.size);
                String _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34) {
                  _elem33 = iprot.readString();
                  struct.mUKey.add(_elem33);
                }
                iprot.readListEnd();
              }
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: //UVALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.mUValue = new ArrayList<String>(_list32.size);
                String _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34) {
                  _elem33 = iprot.readString();
                  struct.mUValue.add(_elem33);
                }
                iprot.readListEnd();
              }
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: //DELETEUDM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.mDeleteAttribute = iprot.readBool();             
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SetAttributeTOptions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetPinned()) {
        oprot.writeFieldBegin(PINNED_FIELD_DESC);
        oprot.writeBool(struct.pinned);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTtl()) {
        oprot.writeFieldBegin(TTL_FIELD_DESC);
        oprot.writeI64(struct.ttl);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPersisted()) {
        oprot.writeFieldBegin(PERSISTED_FIELD_DESC);
        oprot.writeBool(struct.persisted);
        oprot.writeFieldEnd();
      }
      if (struct.owner != null) {
        if (struct.isSetOwner()) {
          oprot.writeFieldBegin(OWNER_FIELD_DESC);
          oprot.writeString(struct.owner);
          oprot.writeFieldEnd();
        }
      }
      if (struct.group != null) {
        if (struct.isSetGroup()) {
          oprot.writeFieldBegin(GROUP_FIELD_DESC);
          oprot.writeString(struct.group);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMode()) {
        oprot.writeFieldBegin(MODE_FIELD_DESC);
        oprot.writeI16(struct.mode);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRecursive()) {
        oprot.writeFieldBegin(RECURSIVE_FIELD_DESC);
        oprot.writeBool(struct.recursive);
        oprot.writeFieldEnd();
      }
      if (struct.ttlAction != null) {
        if (struct.isSetTtlAction()) {
          oprot.writeFieldBegin(TTL_ACTION_FIELD_DESC);
          oprot.writeI32(struct.ttlAction.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isIndex) {
        // BLOCKID_FIELD_DESC
        oprot.writeFieldBegin(BLOCKID_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.mIndexInfo_BlockId.size()));
          for (long tmp0 : struct.mIndexInfo_BlockId) {
            oprot.writeI64(tmp0);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
        // MAXVALUE_FIELD_DESC
        oprot.writeFieldBegin(MAXVALUE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.mIndexInfo_MaxValue.size()));
          for(double tmp1 : struct.mIndexInfo_MaxValue) {
            oprot.writeDouble(tmp1);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
        // MINVALUE_FIELD_DESC
        oprot.writeFieldBegin(MINVALUE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.mIndexInfo_MinValue.size()));
          for(double tmp2 : struct.mIndexInfo_MinValue) {
            oprot.writeDouble(tmp2);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
        // VARNAME_FIELD_DESC
        oprot.writeFieldBegin(VARNAME_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.mIndexInfo_VarName.size()));
          for(String tmp3 : struct.mIndexInfo_VarName) {
            oprot.writeString(tmp3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
        // AUGINDEX_FIELD_DESC
        oprot.writeFieldBegin(AUGINDEX_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.mAugIndex.size()));
          for (long tmp4 : struct.mAugIndex) {
            oprot.writeI64(tmp4);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mUDM) {
        // PATH_FIELD_DESC
        oprot.writeFieldBegin(PATH_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.mPath.size()));
          for(String tmp3 : struct.mPath) {
            oprot.writeString(tmp3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
       // UKEY_FIELD_DESC
       oprot.writeFieldBegin(UKEY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.mUKey.size()));
          for(String tmp3 : struct.mUKey) {
            oprot.writeString(tmp3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
       // UVALUE_FIELD_DESC
       oprot.writeFieldBegin(UVALUE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.mUValue.size()));
          for(String tmp3 : struct.mUValue) {
            oprot.writeString(tmp3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      // DELETEUDM_FIELD_DESC
        oprot.writeFieldBegin(DELETEUDM_FIELD_DESC);
        oprot.writeBool(struct.mDeleteAttribute);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SetAttributeTOptionsTupleSchemeFactory implements SchemeFactory {
    public SetAttributeTOptionsTupleScheme getScheme() {
      return new SetAttributeTOptionsTupleScheme();
    }
  }

  private static class SetAttributeTOptionsTupleScheme extends TupleScheme<SetAttributeTOptions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SetAttributeTOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPinned()) {
        optionals.set(0);
      }
      if (struct.isSetTtl()) {
        optionals.set(1);
      }
      if (struct.isSetPersisted()) {
        optionals.set(2);
      }
      if (struct.isSetOwner()) {
        optionals.set(3);
      }
      if (struct.isSetGroup()) {
        optionals.set(4);
      }
      if (struct.isSetMode()) {
        optionals.set(5);
      }
      if (struct.isSetRecursive()) {
        optionals.set(6);
      }
      if (struct.isSetTtlAction()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetPinned()) {
        oprot.writeBool(struct.pinned);
      }
      if (struct.isSetTtl()) {
        oprot.writeI64(struct.ttl);
      }
      if (struct.isSetPersisted()) {
        oprot.writeBool(struct.persisted);
      }
      if (struct.isSetOwner()) {
        oprot.writeString(struct.owner);
      }
      if (struct.isSetGroup()) {
        oprot.writeString(struct.group);
      }
      if (struct.isSetMode()) {
        oprot.writeI16(struct.mode);
      }
      if (struct.isSetRecursive()) {
        oprot.writeBool(struct.recursive);
      }
      if (struct.isSetTtlAction()) {
        oprot.writeI32(struct.ttlAction.getValue());
      }
      if (struct.isIndex) {
        //Write block id list
        oprot.writeI32(struct.mIndexInfo_BlockId.size());
        for (long tmp0 : struct.mIndexInfo_BlockId) {
          oprot.writeI64(tmp0);
        }
        //Write max value list
        oprot.writeI32(struct.mIndexInfo_MaxValue.size());
        for (double tmp1 : struct.mIndexInfo_MaxValue) {
           oprot.writeDouble(tmp1);
        }
        //Write min value list
        oprot.writeI32(struct.mIndexInfo_MinValue.size());
        for (double tmp2 : struct.mIndexInfo_MinValue) {
           oprot.writeDouble(tmp2);
        }
        //Write var name list
        oprot.writeI32(struct.mIndexInfo_VarName.size());
        for (String tmp3 : struct.mIndexInfo_VarName) {
           oprot.writeString(tmp3);
        }
        //Write aug index list
        oprot.writeI32(struct.mAugIndex.size());
        for (long tmp4 : struct.mAugIndex) {
          oprot.writeI64(tmp4);
        }
      }
      if (struct.mUDM) {
        //Write user-defined metadata path
        oprot.writeI32(struct.mPath.size());
        for (String tmp3 : struct.mPath) {
           oprot.writeString(tmp3);
        }
        // Write user-defined metadata key
        oprot.writeI32(struct.mUKey.size());
        for (String tmp3 : struct.mUKey) {
           oprot.writeString(tmp3);
        }
        //Write user-defined metadata value
        oprot.writeI32(struct.mUValue.size());
        for (String tmp3 : struct.mUValue) {
           oprot.writeString(tmp3);
        }
        //Delete user-defined metadata
        oprot.writeBool(struct.mDeleteAttribute);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SetAttributeTOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.pinned = iprot.readBool();
        struct.setPinnedIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ttl = iprot.readI64();
        struct.setTtlIsSet(true);
      }
      if (incoming.get(2)) {
        struct.persisted = iprot.readBool();
        struct.setPersistedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.owner = iprot.readString();
        struct.setOwnerIsSet(true);
      }
      if (incoming.get(4)) {
        struct.group = iprot.readString();
        struct.setGroupIsSet(true);
      }
      if (incoming.get(5)) {
        struct.mode = iprot.readI16();
        struct.setModeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.recursive = iprot.readBool();
        struct.setRecursiveIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ttlAction = alluxio.thrift.TTtlAction.findByValue(iprot.readI32());
        struct.setTtlActionIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.mIndexInfo_BlockId = new ArrayList<Long>(_list41.size);
          long tmp0;
          for (int _i43 = 0; _i43 < _list41.size; ++_i43) {
            tmp0 = iprot.readI64();
            struct.mIndexInfo_BlockId.add(tmp0);
          }
        }
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.mIndexInfo_MaxValue = new ArrayList<Double>(_list42.size);
          double tmp1;
          for(int _i44 = 0; _i44 < _list42.size; ++_i44) {
            tmp1 = iprot.readDouble();
            struct.mIndexInfo_MaxValue.add(tmp1);
          }
        }
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list43 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.mIndexInfo_MinValue = new ArrayList<Double>(_list43.size);
          double tmp2;
          for(int _i45 = 0; _i45 < _list43.size; ++_i45) {
            tmp2 = iprot.readDouble();
            struct.mIndexInfo_MaxValue.add(tmp2);
          }
        }
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list44 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.mIndexInfo_VarName = new ArrayList<String>(_list44.size);
          String tmp3;
          for (int _i46 = 0; _i46 < _list44.size; ++_i46) {
            tmp3 = iprot.readString();
            struct.mIndexInfo_VarName.add(tmp3);
          }
        }
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.mAugIndex = new ArrayList<Long>(_list45.size);
          long tmp4;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47) {
            tmp4 = iprot.readI64();
            struct.mAugIndex.add(tmp4);
          }
        }
      }
      if  (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list44 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.mPath = new ArrayList<String>(_list44.size);
          String tmp3;
          for (int _i46 = 0; _i46 < _list44.size; ++_i46) {
            tmp3 = iprot.readString();
            struct.mPath.add(tmp3);
          }
        }
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list44 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.mUKey = new ArrayList<String>(_list44.size);
          String tmp3;
          for (int _i46 = 0; _i46 < _list44.size; ++_i46) {
            tmp3 = iprot.readString();
            struct.mUKey.add(tmp3);
          }
        }
      }
      if  (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list44 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.mUValue = new ArrayList<String>(_list44.size);
          String tmp3;
          for (int _i46 = 0; _i46 < _list44.size; ++_i46) {
            tmp3 = iprot.readString();
            struct.mUValue.add(tmp3);
          }
        }
      }
     if  (incoming.get(17)) {
       struct.mDeleteAttribute = iprot.readBool();
     }
    }
  }

}

